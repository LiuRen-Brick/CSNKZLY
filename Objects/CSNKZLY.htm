<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CSNKZLY.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CSNKZLY.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Tue May  7 15:31:47 2024
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[43]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[26]">test1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">test1</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">AD9833_SendData</a> from dev_ad9877.o(.text.AD9833_SendData) referenced from dev_ad9877.o(.text.AD9833_SetPara)
 <LI><a href="#[11]">ADC1_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[e]">DMA1_Channel1_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[f]">DMA1_Channel2_3_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[10]">DMA1_Channel4_5_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[23]">DevGpio_SetOutPut</a> from dev_gpio.o(.text.DevGpio_SetOutPut) referenced from dev_ad9877.o(.text.AD9833_SendData)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from ft32f0xx_it.o(.text.EXTI4_15_IRQHandler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[25]">GPIO_Init</a> from ft32f0xx_gpio.o(.text.GPIO_Init) referenced from main.o(.text.FT32_GPIO_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from ft32f0xx_it.o(.text.HardFault_Handler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1b]">I2C2_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ft32f0xx_it.o(.text.NMI_Handler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[7]">PVD_VDDIO_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1d]">SPI2_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from system_ft32f0xx.o(.text.SystemInit) referenced from startup_ft32f030x8.o(.text)
 <LI><a href="#[16]">TIM14_IRQHandler</a> from ft32f0xx_it.o(.text.TIM14_IRQHandler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[17]">TIM15_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[18]">TIM16_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[19]">TIM17_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[12]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from ft32f0xx_it.o(.text.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[13]">TIM1_CC_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[14]">TIM3_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[15]">TIM6_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1e]">USART1_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[1f]">USART2_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[20]">USB_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_ft32f030x8.o(.text) referenced from startup_ft32f030x8.o(RESET)
 <LI><a href="#[22]">__main</a> from __main.o(!!!main) referenced from startup_ft32f030x8.o(.text)
 <LI><a href="#[28]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[27]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[26]">test1</a> from main.o(.text.test1) referenced from main.o(.text.main)
 <LI><a href="#[29]">vListInitialise</a> from list.o(.text.vListInitialise) referenced from tasks.o(.text.xTaskCreate)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[31]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[af]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[36]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[c3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[c4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[30]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[32]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[45]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[35]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[37]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_VDDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ft32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_ft32f030x8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[ca]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_memset4</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset4
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[3d]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[cc]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD9833_SetPara
</UL>

<P><STRONG><a name="[41]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[40]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD9833_SetPara
</UL>

<P><STRONG><a name="[d4]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD9833_SetPara
</UL>

<P><STRONG><a name="[d5]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[34]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d6]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d7]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d8]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>AD9833_InitIo</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dev_ad9877.o(.text.AD9833_InitIo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AD9833_InitIo
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>AD9833_SetPara</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, dev_ad9877.o(.text.AD9833_SetPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AD9833_SetPara &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>ADC_ChannelConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft32f0xx_adc.o(.text.ADC_ChannelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[54]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ft32f0xx_adc.o(.text.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[53]"></a>ADC_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ft32f0xx_adc.o(.text.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[52]"></a>ADC_DMARequestModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ft32f0xx_adc.o(.text.ADC_DMARequestModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[4a]"></a>ADC_DMA_Config</STRONG> (Thumb, 244 bytes, Stack size 104 bytes, main.o(.text.ADC_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ADC_DMA_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestModeConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>ADC_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ft32f0xx_adc.o(.text.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[51]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ft32f0xx_adc.o(.text.ADC_GetCalibrationFactor))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[55]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ft32f0xx_adc.o(.text.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[4f]"></a>ADC_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ft32f0xx_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[59]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft32f0xx_adc.o(.text.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[4e]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ft32f0xx_adc.o(.text.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[85]"></a>DMA_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ft32f0xx_dma.o(.text.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_val
</UL>

<P><STRONG><a name="[58]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ft32f0xx_dma.o(.text.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[56]"></a>DMA_DeInit</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, ft32f0xx_dma.o(.text.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[84]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ft32f0xx_dma.o(.text.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_val
</UL>

<P><STRONG><a name="[57]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ft32f0xx_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[8a]"></a>Delay</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, systick.o(.text.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>DevGpio_ReadInPut</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dev_gpio.o(.text.DevGpio_ReadInPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevGpio_ReadInPut
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23]"></a>DevGpio_SetOutPut</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dev_gpio.o(.text.DevGpio_SetOutPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevGpio_SetOutPut
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD9833_SendData
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ad9877.o(.text.AD9833_SendData)
</UL>
<P><STRONG><a name="[5e]"></a>Devpwm_SetDuty</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dev_pwm.o(.text.Devpwm_SetDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Devpwm_SetDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ft32f0xx_it.o(.text.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ft32f0xx_exti.o(.text.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>EXTI_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ft32f0xx_exti.o(.text.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>EXTI_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ft32f0xx_exti.o(.text.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT32_EXIT_Init
</UL>

<P><STRONG><a name="[62]"></a>FT32_EXIT_Init</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, main.o(.text.FT32_EXIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FT32_EXIT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>FT32_GPIO_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, main.o(.text.FT32_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT32_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>GPIO_Init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ft32f0xx_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3BaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim16BaseInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT32_EXIT_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.FT32_GPIO_Init)
</UL>
<P><STRONG><a name="[80]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ft32f0xx_gpio.o(.text.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3BaseInit
</UL>

<P><STRONG><a name="[5c]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ft32f0xx_gpio.o(.text.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevGpio_ReadInPut
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ft32f0xx_gpio.o(.text.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevGpio_SetOutPut
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft32f0xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IWDG_Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text.IWDG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>IWDG_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ft32f0xx_iwdg.o(.text.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[6b]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ft32f0xx_iwdg.o(.text.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[69]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ft32f0xx_iwdg.o(.text.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[6a]"></a>IWDG_SetReload</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ft32f0xx_iwdg.o(.text.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[68]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ft32f0xx_iwdg.o(.text.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft32f0xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>NVIC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ft32f0xx_misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1BaseInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT32_EXIT_Init
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3BaseInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1BaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim16BaseInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT32_GPIO_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT32_EXIT_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[79]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3BaseInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1BaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim16BaseInit
</UL>

<P><STRONG><a name="[4d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT32_EXIT_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
</UL>

<P><STRONG><a name="[5a]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(.text.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[86]"></a>RCC_LSICmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ft32f0xx_rcc.o(.text.RCC_LSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ft32f0xx_syscfg.o(.text.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT32_EXIT_Init
</UL>

<P><STRONG><a name="[6e]"></a>SendShortMessageFromISR</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, taskmanager.o(.text.SendShortMessageFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, system_ft32f0xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickInit
</UL>

<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, system_ft32f0xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>SystickInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, systick.o(.text.SystickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystickInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>TIM14_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft32f0xx_it.o(.text.TIM14_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ft32f0xx_it.o(.text.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_BRK_UP_TRG_COM_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ft32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ft32f0xx_tim.o(.text.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>TIM_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ft32f0xx_tim.o(.text.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3BaseInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1BaseInit
</UL>

<P><STRONG><a name="[82]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ft32f0xx_tim.o(.text.TIM_CtrlPWMOutputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CtrlPWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3BaseInit
</UL>

<P><STRONG><a name="[76]"></a>TIM_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ft32f0xx_tim.o(.text.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ft32f0xx_tim.o(.text.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1BaseInit
</UL>

<P><STRONG><a name="[7b]"></a>TIM_OC1Init</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, ft32f0xx_tim.o(.text.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3BaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim16BaseInit
</UL>

<P><STRONG><a name="[81]"></a>TIM_OC4Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ft32f0xx_tim.o(.text.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3BaseInit
</UL>

<P><STRONG><a name="[5f]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft32f0xx_tim.o(.text.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devpwm_SetDuty
</UL>

<P><STRONG><a name="[7a]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ft32f0xx_tim.o(.text.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3BaseInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1BaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim16BaseInit
</UL>

<P><STRONG><a name="[78]"></a>Tim16BaseInit</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, main.o(.text.Tim16BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Tim16BaseInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>Tim1BaseInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, main.o(.text.Tim1BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Tim1BaseInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>Tim3BaseInit</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, main.o(.text.Tim3BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Tim3BaseInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>get_adc_val</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dev_adc.o(.text.get_adc_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_adc_val
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_val
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3BaseInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1BaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim16BaseInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT32_GPIO_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT32_EXIT_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devpwm_SetDuty
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevGpio_SetOutPut
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevGpio_ReadInPut
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Config
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD9833_SetPara
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD9833_InitIo
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[95]"></a>pvPortMalloc</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[a3]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[26]"></a>test1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.test1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = test1 &rArr;  test1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test1
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[70]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.text.ulSetInterruptMaskFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8c]"></a>uxListRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>

<P><STRONG><a name="[99]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, taskmanager.o(.text.vApplicationMallocFailedHook))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[9f]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, taskmanager.o(.text.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[9b]"></a>vApplicationTickHook</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, taskmanager.o(.text.vApplicationTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendShortMessageFromISR
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[72]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.text.vClearInterruptMaskFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[29]"></a>vListInitialise</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.xTaskCreate)
</UL>
<P><STRONG><a name="[a2]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[8d]"></a>vListInsert</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[a4]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>

<P><STRONG><a name="[92]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[93]"></a>vPortExitCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[91]"></a>vPortFree</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[9d]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[94]"></a>vPortYield</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.text.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[9a]"></a>vTaskDelay</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test1
</UL>

<P><STRONG><a name="[89]"></a>vTaskStartScheduler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6d]"></a>vTaskSwitchContext</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9e]"></a>xPortStartScheduler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortStartFirstTask
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[6f]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendShortMessageFromISR
</UL>

<P><STRONG><a name="[88]"></a>xTaskCreate</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>xTaskIncrementTick</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[8f]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[a1]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[98]"></a>xTaskResumeAll</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[24]"></a>AD9833_SendData</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dev_ad9877.o(.text.AD9833_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AD9833_SendData &rArr; DevGpio_SetOutPut
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevGpio_SetOutPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ad9877.o(.text.AD9833_SetPara)
</UL>
<P><STRONG><a name="[8e]"></a>prvCopyDataToQueue</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[8b]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[90]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[28]"></a>prvIdleTask</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; SendShortMessageFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[a5]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[27]"></a>prvTaskExitError</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[a0]"></a>vPortStartFirstTask</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, port.o(.text.vPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[97]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
